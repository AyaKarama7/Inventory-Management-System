// <auto-generated />
using System;
using ManageDatabase.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManageDatabase.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250313005318_m1")]
    partial class m1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManageDatabase.Models.ConsumptionPermission", b =>
                {
                    b.Property<int>("ConsumptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsumptionID"));

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PermissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarehouseName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConsumptionID");

                    b.HasIndex("CustomerName");

                    b.HasIndex("WarehouseName");

                    b.ToTable("ConsumptionPermissions");
                });

            modelBuilder.Entity("ManageDatabase.Models.ConsumptionPermissionDetails", b =>
                {
                    b.Property<int>("ConsumptionID")
                        .HasColumnType("int");

                    b.Property<int>("ItemCode")
                        .HasColumnType("int");

                    b.Property<int>("ItemAmount")
                        .HasColumnType("int");

                    b.HasKey("ConsumptionID", "ItemCode");

                    b.HasIndex("ItemCode");

                    b.ToTable("ConsumptionPermissionDetails");
                });

            modelBuilder.Entity("ManageDatabase.Models.Customer", b =>
                {
                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerName");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ManageDatabase.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ManageDatabase.Models.Item", b =>
                {
                    b.Property<int>("ItemCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemCode"));

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemCode");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ManageDatabase.Models.ItemMeasureUnit", b =>
                {
                    b.Property<int>("ItemCode")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ItemCode", "Unit");

                    b.ToTable("ItemMeasureUnits");
                });

            modelBuilder.Entity("ManageDatabase.Models.ItemWarehouse", b =>
                {
                    b.Property<int>("ItemCode")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ItemAmount")
                        .HasColumnType("int");

                    b.HasKey("ItemCode", "WarehouseName");

                    b.HasIndex("WarehouseName");

                    b.ToTable("ItemWarehouses");
                });

            modelBuilder.Entity("ManageDatabase.Models.StockTransform", b =>
                {
                    b.Property<int>("TransformID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransformID"));

                    b.Property<string>("FromWarehouse")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToWarehouse")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TransformID");

                    b.HasIndex("FromWarehouse");

                    b.HasIndex("SupplierName");

                    b.HasIndex("ToWarehouse");

                    b.ToTable("StockTransforms");
                });

            modelBuilder.Entity("ManageDatabase.Models.StockTransformDetails", b =>
                {
                    b.Property<int>("TransformID")
                        .HasColumnType("int");

                    b.Property<int>("ItemCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransformID", "ItemCode");

                    b.HasIndex("ItemCode");

                    b.ToTable("StockTransformDetails");
                });

            modelBuilder.Entity("ManageDatabase.Models.Supplier", b =>
                {
                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SupplierEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierFax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierName");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ManageDatabase.Models.SupplingPermission", b =>
                {
                    b.Property<int>("SupplingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplingID"));

                    b.Property<DateTime>("PermissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WarehouseName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SupplingID");

                    b.HasIndex("SupplierName");

                    b.HasIndex("WarehouseName");

                    b.ToTable("SupplingPermissions");
                });

            modelBuilder.Entity("ManageDatabase.Models.SupplingPermissionDetails", b =>
                {
                    b.Property<int>("SupplingID")
                        .HasColumnType("int");

                    b.Property<int>("ItemCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SupplingID", "ItemCode");

                    b.HasIndex("ItemCode");

                    b.ToTable("SupplingPermissionDetails");
                });

            modelBuilder.Entity("ManageDatabase.Models.Warehouse", b =>
                {
                    b.Property<string>("WarehouseName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WarehouseAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WarehouseMangerId")
                        .HasColumnType("int");

                    b.HasKey("WarehouseName");

                    b.HasIndex("WarehouseMangerId")
                        .IsUnique()
                        .HasFilter("[WarehouseMangerId] IS NOT NULL");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("ManageDatabase.Models.ConsumptionPermission", b =>
                {
                    b.HasOne("ManageDatabase.Models.Customer", "Customer")
                        .WithMany("Permissions")
                        .HasForeignKey("CustomerName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ManageDatabase.Models.Warehouse", "Warehouse")
                        .WithMany("Permissions")
                        .HasForeignKey("WarehouseName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ManageDatabase.Models.ConsumptionPermissionDetails", b =>
                {
                    b.HasOne("ManageDatabase.Models.ConsumptionPermission", "ConsumptionPermission")
                        .WithMany("PermissionDetails")
                        .HasForeignKey("ConsumptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManageDatabase.Models.Item", "Item")
                        .WithMany("PermissionDetails")
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConsumptionPermission");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ManageDatabase.Models.ItemMeasureUnit", b =>
                {
                    b.HasOne("ManageDatabase.Models.Item", "Item")
                        .WithMany("ItemMeasureUnits")
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ManageDatabase.Models.ItemWarehouse", b =>
                {
                    b.HasOne("ManageDatabase.Models.Item", "Item")
                        .WithMany("ItemWarehouses")
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManageDatabase.Models.Warehouse", "Warehouse")
                        .WithMany("ItemWarehouses")
                        .HasForeignKey("WarehouseName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ManageDatabase.Models.StockTransform", b =>
                {
                    b.HasOne("ManageDatabase.Models.Warehouse", "FWarehouse")
                        .WithMany("From")
                        .HasForeignKey("FromWarehouse")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ManageDatabase.Models.Supplier", "Supplier")
                        .WithMany("Transforms")
                        .HasForeignKey("SupplierName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ManageDatabase.Models.Warehouse", "TWarehouse")
                        .WithMany("To")
                        .HasForeignKey("ToWarehouse")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FWarehouse");

                    b.Navigation("Supplier");

                    b.Navigation("TWarehouse");
                });

            modelBuilder.Entity("ManageDatabase.Models.StockTransformDetails", b =>
                {
                    b.HasOne("ManageDatabase.Models.Item", "Item")
                        .WithMany("StockTransformDetails")
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManageDatabase.Models.StockTransform", "StockTransform")
                        .WithMany("StockTransformDetails")
                        .HasForeignKey("TransformID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("StockTransform");
                });

            modelBuilder.Entity("ManageDatabase.Models.SupplingPermission", b =>
                {
                    b.HasOne("ManageDatabase.Models.Supplier", "Supplier")
                        .WithMany("SupplingPermissions")
                        .HasForeignKey("SupplierName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ManageDatabase.Models.Warehouse", "Warehouse")
                        .WithMany("SupplingPermissions")
                        .HasForeignKey("WarehouseName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ManageDatabase.Models.SupplingPermissionDetails", b =>
                {
                    b.HasOne("ManageDatabase.Models.Item", "Item")
                        .WithMany("SupplingPermissionDetails")
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ManageDatabase.Models.SupplingPermission", "SupplingPermission")
                        .WithMany("SupplingPermissionDetails")
                        .HasForeignKey("SupplingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SupplingPermission");
                });

            modelBuilder.Entity("ManageDatabase.Models.Warehouse", b =>
                {
                    b.HasOne("ManageDatabase.Models.Employee", "Employee")
                        .WithOne("Warehouse")
                        .HasForeignKey("ManageDatabase.Models.Warehouse", "WarehouseMangerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ManageDatabase.Models.ConsumptionPermission", b =>
                {
                    b.Navigation("PermissionDetails");
                });

            modelBuilder.Entity("ManageDatabase.Models.Customer", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ManageDatabase.Models.Employee", b =>
                {
                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("ManageDatabase.Models.Item", b =>
                {
                    b.Navigation("ItemMeasureUnits");

                    b.Navigation("ItemWarehouses");

                    b.Navigation("PermissionDetails");

                    b.Navigation("StockTransformDetails");

                    b.Navigation("SupplingPermissionDetails");
                });

            modelBuilder.Entity("ManageDatabase.Models.StockTransform", b =>
                {
                    b.Navigation("StockTransformDetails");
                });

            modelBuilder.Entity("ManageDatabase.Models.Supplier", b =>
                {
                    b.Navigation("SupplingPermissions");

                    b.Navigation("Transforms");
                });

            modelBuilder.Entity("ManageDatabase.Models.SupplingPermission", b =>
                {
                    b.Navigation("SupplingPermissionDetails");
                });

            modelBuilder.Entity("ManageDatabase.Models.Warehouse", b =>
                {
                    b.Navigation("From");

                    b.Navigation("ItemWarehouses");

                    b.Navigation("Permissions");

                    b.Navigation("SupplingPermissions");

                    b.Navigation("To");
                });
#pragma warning restore 612, 618
        }
    }
}
